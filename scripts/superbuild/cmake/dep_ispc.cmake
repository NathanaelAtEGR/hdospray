## Copyright 2009-2021 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

set(EP_ISPC ispc)

if (APPLE)
  set(ISPC_OSSUFFIX "macOS.universal.tar.gz")
elseif(WIN32)
  set(ISPC_OSSUFFIX "windows.zip")
else()
  set(ISPC_OSSUFFIX "linux-oneapi.tar.gz")
endif()

set(ISPC_URL "https://github.com/ispc/ispc/releases/download/v${HDOSPRAY_ISPC_VERSION}/ispc-v${HDOSPRAY_ISPC_VERSION}-${ISPC_OSSUFFIX}")

if (ISPC_HASH)
  set(ISPC_URL_HASH URL_HASH SHA256=${ISPC_HASH})
endif()

set(ISPC_INSTALL_COMMAND
  COMMAND "${CMAKE_COMMAND}" -E copy_directory <SOURCE_DIR>/bin ${CMAKE_INSTALL_PREFIX}/bin
  # make lib directories if they do not exist so copy command doesn't error out.  It uses either lib or lib64.
  COMMAND "${CMAKE_COMMAND}" -E make_directory <SOURCE_DIR>/lib
  COMMAND "${CMAKE_COMMAND}" -E make_directory <SOURCE_DIR>/lib64
  COMMAND "${CMAKE_COMMAND}" -E copy_directory <SOURCE_DIR>/lib ${CMAKE_INSTALL_PREFIX}/lib
  COMMAND "${CMAKE_COMMAND}" -E copy_directory <SOURCE_DIR>/lib64 ${CMAKE_INSTALL_PREFIX}/lib
  COMMAND "${CMAKE_COMMAND}" -E copy_directory <SOURCE_DIR>/lib64 ${CMAKE_INSTALL_PREFIX}/lib64
)

ExternalProject_Add(${EP_ISPC}
  PREFIX ${EP_ISPC}
  STAMP_DIR ${EP_ISPC}/stamp
  SOURCE_DIR ${EP_ISPC}/src
  BINARY_DIR ${EP_ISPC}/build
  URL ${ISPC_URL}
  ${ISPC_URL_HASH}
  CONFIGURE_COMMAND ""
  BUILD_COMMAND ""
  INSTALL_COMMAND ${ISPC_INSTALL_COMMAND}
  BUILD_ALWAYS OFF
)

set(ISPC_PATH "${CMAKE_INSTALL_PREFIX}/bin/ispc${CMAKE_EXECUTABLE_SUFFIX}")

set(COMPONENT_NAME_ispcrt ispcrt)
string(REGEX REPLACE "(^[0-9]+\.[0-9]+\.[0-9]+$)" "v\\1" ISPCRT_ARCHIVE ${HDOSPRAY_ISPC_VERSION})

set(ISPCRT_BRANCH "${ISPCRT_ARCHIVE}" CACHE STRING "Which branch of ISPCRT to build" )
set(ISPCRT_URL "https://github.com/ispc/ispc/archive/refs/tags/${ISPCRT_ARCHIVE}.zip"
  CACHE STRING "Location to clone ISPCRT source from")

string(REGEX MATCH ".*\.zip$" ZIP_FILENAME ${ISPCRT_URL})
if (ZIP_FILENAME)
  set(ISPCRT_CLONE_URL URL ${ISPCRT_URL})
else()
  set(ISPCRT_CLONE_URL GIT_REPOSITORY ${ISPCRT_URL} GIT_TAG ${ISPCRT_BRANCH})
endif()

ExternalProject_Add(ispcrt
  PREFIX ${COMPONENT_NAME_ispcrt}
  STAMP_DIR ${COMPONENT_NAME_ispcrt}/stamp
  SOURCE_DIR ${COMPONENT_NAME_ispcrt}/src
  BINARY_DIR ${COMPONENT_NAME_ispcrt}
  LIST_SEPARATOR |
  SOURCE_SUBDIR "ispcrt"
  ${ISPCRT_CLONE_URL}
  CMAKE_ARGS
    -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}
    -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}
    -DCMAKE_INSTALL_DOCDIR=${CMAKE_INSTALL_DOCDIR}
    -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}
    -DCMAKE_BUILD_TYPE=${DEPENDENCIES_BUILD_TYPE}
    -DISPCRT_BUILD_TASKING=OFF
    -DISPCRT_BUILD_GPU=${BUILD_GPU_SUPPORT}
    -DISPCRT_BUILD_TESTS=OFF
    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}
    -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
  BUILD_COMMAND ${DEFAULT_BUILD_COMMAND}
  #INSTALL_COMMAND ""
  BUILD_ALWAYS ${ALWAYS_REBUILD}
)

add_dependencies(ispcrt ispc)
ExternalProject_Add_StepTargets(${COMPONENT_NAME_ispcrt} configure ${EP_ISPC})

list(APPEND CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX})
string(REPLACE ";" "|" CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")

set(ispcrt_DIR "${CMAKE_INSTALL_PREFIX}/lib/cmake/ispcrt-${HDOSPRAY_ISPC_VERSION}")
